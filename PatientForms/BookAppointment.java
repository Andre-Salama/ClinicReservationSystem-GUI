package PatientForms;

import javax.swing.JOptionPane;
import java.util.HashMap;
import ClinicPackage.Clinic;
import ClinicPackage.Slot;
import Users.Doctor;
import Users.Patient;

public class BookAppointment extends javax.swing.JFrame { //Book & Browse appointments

    public BookAppointment() {
        initComponents();
    }

    public BookAppointment(Patient account) {
        initComponents();
        this.account = account;
        this.DocsHM = new HashMap<>();
        this.SlotsHM = new HashMap<>();
        res = -1;
        previousFrame = null;
        Patient.viewAvailableApp(DocCB, SlotList, SpecsCB, Warning, DocsHM, SlotsHM, true);
    }

    public BookAppointment(Patient account, int res, BrowseAppointment previousFrame) {
        initComponents();
        this.account = account;
        this.DocsHM = new HashMap<>();
        this.SlotsHM = new HashMap<>();
        this.res = res;
        this.previousFrame = previousFrame;
        Patient.viewAvailableApp(DocCB, SlotList, SpecsCB, Warning, DocsHM, SlotsHM, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        SpecsCB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SlotList = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        DocCB = new javax.swing.JComboBox<>();
        Warning = new javax.swing.JLabel();
        Book = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Patient");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 40));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SpecsCB.setModel(new javax.swing.DefaultComboBoxModel<>(ClinicPackage.Clinic.Specializations));
        SpecsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpecsCBActionPerformed(evt);
            }
        });
        jPanel2.add(SpecsCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 143, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Choose the specilization :");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 82, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Choose the slot :");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 187, -1, -1));

        SlotList.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(SlotList);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 180, 240, 84));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Choose the doctor : ");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 133, -1, -1));

        DocCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DocCBActionPerformed(evt);
            }
        });
        jPanel2.add(DocCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 210, -1));

        Warning.setForeground(new java.awt.Color(255, 0, 0));
        Warning.setText("This doctor has no available appointments!");
        Warning.setPreferredSize(new java.awt.Dimension(128, 16));
        jPanel2.add(Warning, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 165, 229, -1));

        Book.setBackground(java.awt.Color.blue);
        Book.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Book.setForeground(new java.awt.Color(255, 255, 255));
        Book.setText("Book");
        Book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookActionPerformed(evt);
            }
        });
        jPanel2.add(Book, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 304, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 480, 350));

        Back.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        getContentPane().add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 430, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Andre\\Desktop\\Java Project\\ProjectJava\\clinic background.jpg")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 495));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SpecsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpecsCBActionPerformed
        Patient.viewAvailableApp(this.DocCB, this.SlotList, this.SpecsCB, this.Warning, this.DocsHM, this.SlotsHM, true);
    }//GEN-LAST:event_SpecsCBActionPerformed

    private void DocCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DocCBActionPerformed
        Patient.viewAvailableApp(this.DocCB, this.SlotList, this.SpecsCB, this.Warning, this.DocsHM, this.SlotsHM, false);
    }//GEN-LAST:event_DocCBActionPerformed

    private void BookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookActionPerformed
        try {
            Slot selectedSlot = Clinic.AllSlots[SlotsHM.get(SlotList.getSelectedIndex())];
            Doctor doctor = Clinic.AllDoctors.get(DocsHM.get(DocCB.getSelectedIndex()));
            if (res == -1) {
                String JOP = "Are you sure you want to book this slot?\n" + (String) SpecsCB.getSelectedItem() + ", "
                        + selectedSlot.getDay() + " " + selectedSlot.getTime() + " PM" + ", room " + selectedSlot.getRoom()
                        + " with Dr." + doctor.getName() + " for " + doctor.getFees() + "L.E";
                int decision = JOptionPane.showConfirmDialog(this, JOP, "Booking confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (decision == 0) {
                    account.bookApp(selectedSlot);
                    Clinic.saveEverything();
                    boolean slotIsAvailable = false;
                    for (Doctor doc : Clinic.AllDoctors) {
                        for (Slot s : doc.getAssignedSlots()) {
                            if (s != null)
                                if (s.getAvailability() == true) {
                                    slotIsAvailable = true;
                                    break;
                                }
                        }
                        if (slotIsAvailable == true)
                            break;
                    }
                    if (slotIsAvailable == true)
                        Patient.viewAvailableApp(DocCB, SlotList, SpecsCB, Warning, DocsHM, SlotsHM, false);
                    else {
                        LoggedPatient temp = new LoggedPatient(account);
                        temp.setVisible(true);
                        this.dispose();
                    }
                }
            }
            else {
                String JOP = "Are you sure you want to replace this slot\n" + account.getReservations().get(res).getSlot().getAssignedTo().getSpecialization() + ", " + account.getReservations().get(res) + "\nwith this slot?\n" + (String) SpecsCB.getSelectedItem() + ", "
                        + selectedSlot.getDay() + " " + selectedSlot.getTime() + " PM" + ", room " + selectedSlot.getRoom()
                        + " with Dr." + doctor.getName() + " for " + doctor.getFees() + "L.E";
                int decision = JOptionPane.showConfirmDialog(this, JOP, "Booking confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (decision == 0) {
                    account.updateBooking(res, selectedSlot);
                    Clinic.saveEverything();
                    previousFrame.setEnabled(true);
                    account.viewBookedApps(previousFrame.resList);
                    this.dispose();
                }
            }
        }
        catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Please choose a slot first!", "No slot chosen", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BookActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        if (previousFrame == null) {
            LoggedPatient temp = new LoggedPatient(account);
            temp.setVisible(true);
            this.dispose();
        }
        else {
            previousFrame.setEnabled(true);
            this.dispose();
        }
    }//GEN-LAST:event_BackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookAppointment.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookAppointment.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookAppointment.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookAppointment.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Book;
    private javax.swing.JComboBox<String> DocCB;
    private javax.swing.JList<String> SlotList;
    private javax.swing.JComboBox<String> SpecsCB;
    private javax.swing.JLabel Warning;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private Users.Patient account;
    private HashMap<Integer, Integer> DocsHM;
    private HashMap<Integer, Integer> SlotsHM;
    private int res;
    private BrowseAppointment previousFrame;
}
